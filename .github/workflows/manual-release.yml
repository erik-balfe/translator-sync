name: Manual Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.2.1)'
        required: true
        type: string
      branch:
        description: 'Branch to release from'
        required: true
        default: 'master'
        type: choice
        options:
          - master
      skip-tests:
        description: 'Skip tests (only if they already passed)'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  pre-release-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}
          fetch-depth: 0

      - name: Verify branch is master
        shell: bash
        run: |
          if [ "${{ github.event.inputs.branch }}" != "master" ]; then
            echo "‚ùå ERROR: Releases must be created from the 'master' branch"
            exit 1
          fi
          echo "‚úÖ Release will be created from master branch"

      - name: Check if version already exists
        shell: bash
        run: |
          VERSION="${{ github.event.inputs.version }}"
          
          # Check git tags
          if git tag -l "v$VERSION" | grep -q "v$VERSION"; then
            echo "‚ùå ERROR: Version v$VERSION already exists as a git tag"
            echo "Please choose a different version number"
            exit 1
          fi
          
          # Check NPM registry
          if npm view translator-sync@$VERSION version 2>/dev/null; then
            echo "‚ùå ERROR: Version $VERSION is already published to NPM"
            echo "Please choose a different version number"
            exit 1
          fi
          
          echo "‚úÖ Version v$VERSION is available for release"

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Run tests (unless skipped)
        if: ${{ github.event.inputs.skip-tests != 'true' }}
        shell: bash
        run: |
          echo "üß™ Running tests..."
          bun test tests/unit/
          echo "‚úÖ All tests passed"

      - name: Run security check
        shell: bash
        run: |
          echo "üîç Running security check..."
          bun run security-check
          echo "‚úÖ Security check passed"

      - name: Run type check
        run: |
          echo "üîç Running type check..."
          bun run type-check
          echo "‚úÖ Type check passed"

      - name: Run linter
        run: |
          echo "üßπ Running linter..."
          bun run lint
          echo "‚úÖ Linter passed"

      - name: Validate JSR compatibility
        shell: bash
        run: |
          echo "üîç Validating JSR TypeScript compatibility..."
          bun run jsr-check
          echo "‚úÖ JSR validation passed"

  release:
    needs: pre-release-checks
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Update package.json version
        shell: bash
        run: |
          VERSION="${{ github.event.inputs.version }}"
          # Update package.json version
          sed -i "s/\"version\": \".*\"/\"version\": \"$VERSION\"/" package.json
          echo "üì¶ Updated package.json to version $VERSION"
          
          # Also update deno.json version to keep them in sync
          sed -i "s/\"version\": \".*\"/\"version\": \"$VERSION\"/" deno.json
          echo "üì¶ Updated deno.json to version $VERSION"

      - name: Build project
        run: |
          echo "üèóÔ∏è Building project..."
          bun run build
          echo "‚úÖ Build successful"

      - name: Check for release notes
        id: check_notes
        shell: bash
        run: |
          VERSION="${{ github.event.inputs.version }}"
          if [ -f "docs/releases/v$VERSION.md" ]; then
            echo "notes_exist=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Release notes found for v$VERSION"
          else
            echo "notes_exist=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è No release notes found for v$VERSION - will use auto-generated notes"
          fi

      - name: Read release notes
        id: release_notes
        shell: bash
        run: |
          VERSION="${{ github.event.inputs.version }}"
          
          if [ "${{ steps.check_notes.outputs.notes_exist }}" = "true" ]; then
            # Use manual release notes (skip title line)
            NOTES=$(tail -n +3 "docs/releases/v$VERSION.md")
            echo "Using manual release notes from docs/releases/v$VERSION.md"
          else
            # Use unreleased notes or generate basic notes
            if [ -f "docs/releases/UNRELEASED.md" ]; then
              # Check if UNRELEASED.md has actual content or just template
              if grep -q "CRITICAL.*After completing ANY change" "docs/releases/UNRELEASED.md" && ! grep -A 100 "## üéØ Highlights" "docs/releases/UNRELEASED.md" | grep -q "^- [^[:space:]]"; then
                echo "‚ö†Ô∏è WARNING: UNRELEASED.md appears to contain only template content"
                echo "This suggests no changes were tracked for this release"
                echo "Consider adding actual changes or creating manual release notes"
                NOTES="## Release v$VERSION\n\n‚ö†Ô∏è **Warning**: This release was created without tracked changes.\n\nThis release includes various improvements and bug fixes.\n\nPlease see the commit history for details.\n\n**Note for developers**: Remember to update docs/releases/UNRELEASED.md after each change!"
                echo "Using template warning notes due to empty UNRELEASED.md"
              else
                NOTES=$(tail -n +3 "docs/releases/UNRELEASED.md")
                echo "Using UNRELEASED.md for release notes"
              fi
            else
              NOTES="## Release v$VERSION\n\nThis release includes various improvements and bug fixes.\n\nPlease see the commit history for details."
              echo "Using generic release notes"
            fi
          fi
          
          # Save notes to file for GitHub release
          echo "$NOTES" > final_release_notes.md
          echo "üìù Release notes prepared"

      - name: Create git tag
        shell: bash
        run: |
          VERSION="${{ github.event.inputs.version }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "v$VERSION" -m "Release v$VERSION"
          git push origin "v$VERSION"
          echo "üè∑Ô∏è Created and pushed tag v$VERSION"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.event.inputs.version }}
          name: v${{ github.event.inputs.version }}
          body_path: final_release_notes.md
          draft: false
          prerelease: false
          generate_release_notes: false
          files: |
            dist/index.js
            dist/cli/translator-sync.js
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Debug NPM Token Access
        shell: bash
        run: |
          echo "üîç Debugging NPM token access..."
          echo "Environment: ${{ github.environment }}"
          echo "Repository: ${{ github.repository }}"
          echo "Actor: ${{ github.actor }}"
          
          # Check different possible token sources
          if [ -n "${{ secrets.NPM_TOKEN }}" ]; then
            echo "‚úÖ NPM_TOKEN found in secrets.NPM_TOKEN"
            echo "Token starts with: $(echo '${{ secrets.NPM_TOKEN }}' | cut -c1-8)..."
          else
            echo "‚ùå NPM_TOKEN not found in secrets.NPM_TOKEN"
          fi
          
          if [ -n "${{ vars.NPM_TOKEN }}" ]; then
            echo "‚úÖ NPM_TOKEN found in vars.NPM_TOKEN"
          else
            echo "‚ùå NPM_TOKEN not found in vars.NPM_TOKEN"
          fi
          
          # List available secrets (names only, not values)
          echo "Available secret keys in this context:"
          env | grep -E '^[A-Z_]+=' | cut -d= -f1 | sort

      - name: Publish to NPM
        if: success()
        shell: bash
        run: |
          echo "üì¶ Publishing to NPM..."
          
          # Try multiple token sources
          NPM_TOKEN=""
          if [ -n "${{ secrets.NPM_TOKEN }}" ]; then
            NPM_TOKEN="${{ secrets.NPM_TOKEN }}"
            echo "‚úÖ Using NPM_TOKEN from secrets"
          elif [ -n "${{ vars.NPM_TOKEN }}" ]; then
            NPM_TOKEN="${{ vars.NPM_TOKEN }}"
            echo "‚úÖ Using NPM_TOKEN from variables"
          fi
          
          # Check if any NPM_TOKEN is available
          if [ -z "$NPM_TOKEN" ]; then
            echo "‚ùå ERROR: NPM_TOKEN not found in any location"
            echo ""
            echo "üîß TROUBLESHOOTING:"
            echo "Since you mentioned the token is for 'prod' environment:"
            echo ""
            echo "1. Verify the secret is in the correct location:"
            echo "   - Repository secrets: Settings ‚Üí Secrets and variables ‚Üí Actions ‚Üí Repository secrets"
            echo "   - Environment secrets: Settings ‚Üí Environments ‚Üí prod ‚Üí Environment secrets"
            echo ""
            echo "2. Check the secret name is exactly: NPM_TOKEN (case-sensitive)"
            echo ""
            echo "3. If using environment secrets, verify this workflow:"
            echo "   - Has 'environment: prod' configured (‚úÖ now added)"
            echo "   - The environment exists and has the secret"
            echo ""
            echo "4. Try adding as Repository secret instead of Environment secret"
            echo "   - Go to: https://github.com/erik-balfe/translator-sync/settings/secrets/actions"
            echo "   - Click 'New repository secret' (not environment secret)"
            echo "   - Name: NPM_TOKEN"
            echo "   - Value: [your npm token]"
            echo ""
            echo "üí° Alternative: Publish manually"
            echo "   npm login && npm publish --access public"
            exit 1
          fi
          
          # Validate token format
          if [[ ! "$NPM_TOKEN" =~ ^npm_.+ ]]; then
            echo "‚ùå ERROR: NPM_TOKEN appears to be in wrong format"
            echo "Expected format: npm_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
            echo "Current token starts with: $(echo "$NPM_TOKEN" | cut -c1-8)..."
            echo ""
            echo "Please verify your NPM token is a granular access token from:"
            echo "https://www.npmjs.com/settings/tokens"
            exit 1
          fi
          
          # Check if version already exists on NPM
          VERSION="${{ github.event.inputs.version }}"
          if npm view translator-sync@$VERSION version 2>/dev/null; then
            echo "‚ùå ERROR: Version $VERSION is already published to NPM"
            echo ""
            echo "This usually happens when:"
            echo "1. A previous release workflow succeeded"
            echo "2. Manual npm publish was done"
            echo "3. Feature branch accidentally published this version"
            echo ""
            echo "üîß SOLUTIONS:"
            echo "1. Use a different version number (recommended)"
            echo "2. Unpublish if published within last 72 hours:"
            echo "   npm unpublish translator-sync@$VERSION"
            echo "3. Skip to next patch version"
            exit 1
          fi
          
          echo "üîê Configuring NPM authentication..."
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > .npmrc
          
          echo "‚úÖ NPM authentication configured"
          echo "üì¶ Publishing translator-sync@$VERSION to NPM..."
          
          npm publish --access public
          
          echo "‚úÖ Successfully published to NPM!"
          echo "üîó Package available at: https://www.npmjs.com/package/translator-sync/v/$VERSION"

      - name: Update deno.json version
        shell: bash
        run: |
          VERSION="${{ github.event.inputs.version }}"
          echo "üì¶ Updating deno.json version to $VERSION..."
          
          # Update deno.json version to match package.json
          sed -i "s/\"version\": \".*\"/\"version\": \"$VERSION\"/" deno.json
          echo "‚úÖ Updated deno.json to version $VERSION"

      - name: Publish to JSR
        if: success()
        shell: bash
        run: |
          echo "üì¶ Publishing @tyr/translator-sync to JSR..."
          
          # Check if version already exists on JSR
          VERSION="${{ github.event.inputs.version }}"
          if npx jsr show @tyr/translator-sync@$VERSION 2>/dev/null | grep -q "$VERSION"; then
            echo "‚ö†Ô∏è WARNING: Version $VERSION already exists on JSR"
            echo "This usually means a previous release workflow succeeded"
            echo "Skipping JSR publish to avoid duplicate version error"
          else
            # JSR uses OIDC authentication - no token needed
            npx jsr publish --allow-dirty
            echo "‚úÖ Successfully published to JSR!"
            echo "üîó Package available at: https://jsr.io/@tyr/translator-sync"
          fi

      - name: Create summary
        shell: bash
        run: |
          VERSION="${{ github.event.inputs.version }}"
          echo "## üéâ Release v$VERSION Created Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ‚úÖ Completed Steps:" >> $GITHUB_STEP_SUMMARY
          echo "- Pre-release checks passed" >> $GITHUB_STEP_SUMMARY
          echo "- Security check passed" >> $GITHUB_STEP_SUMMARY
          echo "- Tests passed" >> $GITHUB_STEP_SUMMARY
          echo "- Type check passed" >> $GITHUB_STEP_SUMMARY
          echo "- Linting passed" >> $GITHUB_STEP_SUMMARY
          echo "- Build successful" >> $GITHUB_STEP_SUMMARY
          echo "- Tag created and pushed" >> $GITHUB_STEP_SUMMARY
          echo "- GitHub release created" >> $GITHUB_STEP_SUMMARY
          if [ -z "${{ secrets.NPM_TOKEN }}" ]; then
            echo "- ‚ùå NPM publish failed (NPM_TOKEN not configured)" >> $GITHUB_STEP_SUMMARY
          else
            echo "- NPM package published" >> $GITHUB_STEP_SUMMARY
          fi
          echo "- JSR package published" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîó Links:" >> $GITHUB_STEP_SUMMARY
          echo "- [GitHub Release](https://github.com/erik-balfe/translator-sync/releases/tag/v$VERSION)" >> $GITHUB_STEP_SUMMARY
          echo "- [NPM Package](https://www.npmjs.com/package/translator-sync/v/$VERSION)" >> $GITHUB_STEP_SUMMARY
          echo "- [JSR Package](https://jsr.io/@tyr/translator-sync)" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.check_notes.outputs.notes_exist }}" = "true" ]; then
            echo "- Release notes: docs/releases/v$VERSION.md" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ‚ö†Ô∏è Used UNRELEASED.md or generic notes (consider adding manual notes)" >> $GITHUB_STEP_SUMMARY
          fi